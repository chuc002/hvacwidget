**REPLIT PROMPT - BUILD COMPLETE B2B SAAS MONETIZATION SYSTEM**

I need to transform my ServicePlan Pro widget into a complete B2B SaaS platform where home service companies pay ME monthly subscriptions to access and use my widget platform.

**BUSINESS MODEL:**
- Companies pay ME $399-999/month for access to the widget platform
- Their customers pay THEM for services through the widget
- Free demo + 14-day trial + paid subscriptions

**IMPLEMENTATION NEEDED:**

**1. Create Customer Authentication System**

```typescript
// lib/auth.ts
interface Customer {
  id: string;
  companyName: string;
  email: string;
  phone: string;
  industry: string;
  subscription: {
    plan: 'starter' | 'professional' | 'enterprise';
    status: 'trial' | 'active' | 'cancelled' | 'past_due';
    stripeCustomerId: string;
    stripeSubscriptionId: string;
    trialEndsAt: Date;
    currentPeriodEnd: Date;
  };
  branding: {
    primaryColor: string;
    secondaryColor: string;
    logo?: string;
    customDomain?: string;
  };
  createdAt: Date;
}
```

**2. Create SaaS Subscription Plans**

```typescript
// lib/saas-plans.ts
export const SaaSPlans = [
  {
    id: 'starter',
    name: 'Starter',
    price: 399,
    interval: 'month',
    stripePriceId: 'price_starter_monthly', // Will create in Stripe
    features: [
      'Embedded widget for your website',
      'Basic service plans (3 tiers)',
      'Customer data collection',
      'Email notifications',
      'Basic analytics',
      'Up to 100 customer subscriptions/month'
    ],
    limits: {
      monthlySubscriptions: 100,
      customBranding: false,
      customDomain: false,
      apiAccess: false
    }
  },
  {
    id: 'professional',
    name: 'Professional', 
    price: 699,
    interval: 'month',
    stripePriceId: 'price_professional_monthly',
    popular: true,
    features: [
      'Everything in Starter',
      'Custom branding and colors',
      'Advanced analytics dashboard',
      'Multiple service categories',
      'Priority support',
      'Custom domain integration',
      'Up to 500 customer subscriptions/month'
    ],
    limits: {
      monthlySubscriptions: 500,
      customBranding: true,
      customDomain: true,
      apiAccess: false
    }
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    price: 999,
    interval: 'month', 
    stripePriceId: 'price_enterprise_monthly',
    features: [
      'Everything in Professional',
      'Multi-location support',
      'API access',
      'Custom integrations',
      'White-label solution',
      'Dedicated account manager',
      'Unlimited customer subscriptions'
    ],
    limits: {
      monthlySubscriptions: -1, // unlimited
      customBranding: true,
      customDomain: true,
      apiAccess: true
    }
  }
];
```

**3. Create Customer Registration Flow**

```typescript
// pages/Register.tsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select } from '@/components/ui/select';

export default function Register() {
  const [formData, setFormData] = useState({
    companyName: '',
    email: '',
    phone: '',
    industry: '',
    website: ''
  });

  const industries = [
    'HVAC', 'Pest Control', 'Lawn Care', 'Pool Service', 
    'Cleaning Service', 'Security Systems', 'Handyman', 'Other'
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Create customer account with 14-day trial
    const response = await fetch('/api/customers/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    
    if (response.ok) {
      // Redirect to trial dashboard
      window.location.href = '/trial-welcome';
    }
  };

  return (
    <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6">Start Your Free Trial</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <Input
          placeholder="Company Name"
          value={formData.companyName}
          onChange={(e) => setFormData({...formData, companyName: e.target.value})}
          required
        />
        <Input
          type="email"
          placeholder="Business Email"
          value={formData.email}
          onChange={(e) => setFormData({...formData, email: e.target.value})}
          required
        />
        <Input
          type="tel"
          placeholder="Phone Number"
          value={formData.phone}
          onChange={(e) => setFormData({...formData, phone: e.target.value})}
          required
        />
        <Select
          value={formData.industry}
          onValueChange={(value) => setFormData({...formData, industry: value})}
        >
          {industries.map(industry => (
            <option key={industry} value={industry}>{industry}</option>
          ))}
        </Select>
        <Input
          placeholder="Website URL"
          value={formData.website}
          onChange={(e) => setFormData({...formData, website: e.target.value})}
        />
        <Button type="submit" className="w-full">
          Start 14-Day Free Trial
        </Button>
      </form>
      <p className="text-sm text-gray-600 mt-4">
        No credit card required. Full access for 14 days.
      </p>
    </div>
  );
}
```

**4. Create Demo Widget Page**

```typescript
// pages/Demo.tsx
import SubscriptionWidget from '@/components/SubscriptionWidget';
import { Button } from '@/components/ui/button';

export default function Demo() {
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Demo Banner */}
      <div className="bg-blue-600 text-white p-4 text-center">
        <div className="max-w-4xl mx-auto flex justify-between items-center">
          <span className="text-lg font-medium">
            ðŸŽ­ DEMO MODE - See ServicePlan Pro in Action
          </span>
          <div className="space-x-4">
            <Button variant="outline" className="bg-white text-blue-600">
              Start Free Trial
            </Button>
            <Button variant="outline" className="bg-blue-700 text-white">
              View Pricing
            </Button>
          </div>
        </div>
      </div>

      {/* Demo Widget */}
      <div className="container mx-auto py-8">
        <div className="bg-white rounded-lg shadow-lg p-8 relative">
          {/* Watermark */}
          <div className="absolute top-4 right-4 bg-gray-100 text-gray-600 px-3 py-1 rounded text-sm">
            ServicePlan Pro Demo
          </div>
          
          <SubscriptionWidget 
            companyName="ABC Pest Control" 
            isDemo={true}
          />
        </div>
        
        {/* CTA Section */}
        <div className="mt-8 text-center">
          <h3 className="text-2xl font-bold mb-4">Ready to add this to your website?</h3>
          <p className="text-gray-600 mb-6">
            Start your 14-day free trial and get your own branded widget in minutes.
          </p>
          <Button size="lg" className="mr-4">
            Start Free Trial
          </Button>
          <Button variant="outline" size="lg">
            View Pricing Plans
          </Button>
        </div>
      </div>
    </div>
  );
}
```

**5. Create SaaS Pricing Page**

```typescript
// pages/Pricing.tsx
import { SaaSPlans } from '@/lib/saas-plans';
import { Button } from '@/components/ui/button';
import { Check } from 'lucide-react';

export default function Pricing() {
  return (
    <div className="py-12 bg-gray-50">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-4">Simple, Transparent Pricing</h2>
          <p className="text-xl text-gray-600">
            Choose the plan that fits your business size and needs
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {SaaSPlans.map((plan) => (
            <div key={plan.id} className={`bg-white rounded-lg shadow-lg p-8 relative ${plan.popular ? 'ring-2 ring-blue-500' : ''}`}>
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <span className="bg-blue-500 text-white px-4 py-1 rounded-full text-sm">
                    Most Popular
                  </span>
                </div>
              )}
              
              <h3 className="text-2xl font-bold mb-4">{plan.name}</h3>
              <div className="mb-6">
                <span className="text-4xl font-bold">${plan.price}</span>
                <span className="text-gray-600">/month</span>
              </div>
              
              <ul className="space-y-3 mb-8">
                {plan.features.map((feature, index) => (
                  <li key={index} className="flex items-center">
                    <Check className="h-5 w-5 text-green-500 mr-3" />
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
              
              <Button 
                className="w-full" 
                variant={plan.popular ? 'default' : 'outline'}
                onClick={() => window.location.href = '/register'}
              >
                Start Free Trial
              </Button>
            </div>
          ))}
        </div>

        <div className="text-center mt-12">
          <p className="text-gray-600">
            All plans include a 14-day free trial. No credit card required to start.
          </p>
        </div>
      </div>
    </div>
  );
}
```

**6. Create Customer Dashboard with Subscription Management**

```typescript
// pages/CustomerDashboard.tsx
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

export default function CustomerDashboard() {
  const [customer, setCustomer] = useState(null);
  const [stats, setStats] = useState({
    totalSubscriptions: 0,
    monthlyRevenue: 0,
    activeCustomers: 0
  });

  useEffect(() => {
    // Fetch customer data and stats
    fetchCustomerData();
  }, []);

  const handleUpgrade = (planId: string) => {
    // Redirect to Stripe checkout for plan upgrade
    window.location.href = `/api/create-upgrade-session?plan=${planId}`;
  };

  const handleCancelSubscription = async () => {
    // Cancel subscription logic
  };

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold">Dashboard</h1>
        <p className="text-gray-600">Welcome back, {customer?.companyName}</p>
      </div>

      {/* Subscription Status */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            Current Plan
            <Badge variant={customer?.subscription.status === 'active' ? 'success' : 'warning'}>
              {customer?.subscription.status}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4">
            <div>
              <p className="text-sm text-gray-600">Plan</p>
              <p className="text-lg font-semibold capitalize">{customer?.subscription.plan}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Next Billing Date</p>
              <p className="text-lg font-semibold">
                {customer?.subscription.currentPeriodEnd ? 
                  new Date(customer.subscription.currentPeriodEnd).toLocaleDateString() : 
                  'N/A'
                }
              </p>
            </div>
            <div>
              <Button onClick={() => handleUpgrade('professional')}>
                Upgrade Plan
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Business Stats */}
      <div className="grid md:grid-cols-3 gap-6 mb-6">
        <Card>
          <CardHeader>
            <CardTitle>Total Subscriptions</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">{stats.totalSubscriptions}</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Monthly Revenue</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">${stats.monthlyRevenue}</p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Active Customers</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-3xl font-bold">{stats.activeCustomers}</p>
          </CardContent>
        </Card>
      </div>

      {/* Widget Embed Code */}
      <Card>
        <CardHeader>
          <CardTitle>Your Widget Embed Code</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-100 p-4 rounded">
            <code className="text-sm">
              {`<iframe src="https://serviceplanpro.com/embed/${customer?.id}" width="100%" height="800px" frameborder="0"></iframe>`}
            </code>
          </div>
          <Button className="mt-4">Copy Code</Button>
        </CardContent>
      </Card>
    </div>
  );
}
```

**7. Create API Routes for Customer Management**

```typescript
// server/api/customers.ts
router.post('/register', async (req, res) => {
  const { companyName, email, phone, industry, website } = req.body;
  
  try {
    // Create customer in database
    const customer = await db.insert(customers).values({
      companyName,
      email,
      phone,
      industry,
      website,
      subscription: {
        plan: 'starter',
        status: 'trial',
        trialEndsAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // 14 days
      }
    }).returning();

    // Send welcome email
    await sendWelcomeEmail(customer.email, customer.companyName);

    res.json({ success: true, customerId: customer.id });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.post('/upgrade', async (req, res) => {
  const { customerId, planId } = req.body;
  
  try {
    // Create Stripe checkout session for plan upgrade
    const session = await stripe.checkout.sessions.create({
      customer_email: customer.email,
      mode: 'subscription',
      line_items: [{
        price: SaaSPlans.find(p => p.id === planId).stripePriceId,
        quantity: 1,
      }],
      success_url: `${process.env.DOMAIN}/dashboard?upgrade=success`,
      cancel_url: `${process.env.DOMAIN}/dashboard?upgrade=cancelled`,
      metadata: {
        customerId,
        planId
      }
    });

    res.json({ url: session.url });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
```

**8. Create Access Control Middleware**

```typescript
// middleware/auth.ts
export const requireActiveSubscription = async (req, res, next) => {
  try {
    const customerId = req.session.customerId;
    if (!customerId) {
      return res.redirect('/login');
    }

    const customer = await getCustomerById(customerId);
    if (!customer) {
      return res.redirect('/login');
    }

    // Check subscription status
    if (customer.subscription.status === 'trial') {
      if (new Date() > customer.subscription.trialEndsAt) {
        return res.redirect('/subscribe');
      }
    } else if (customer.subscription.status !== 'active') {
      return res.redirect('/subscribe');
    }

    req.customer = customer;
    next();
  } catch (error) {
    res.redirect('/login');
  }
};
```

**9. Update App Routes**

```typescript
// App.tsx - Add new routes
<Route path="/demo" component={Demo} />
<Route path="/pricing" component={Pricing} />
<Route path="/register" component={Register} />
<Route path="/login" component={Login} />
<Route path="/dashboard" component={CustomerDashboard} />
<Route path="/subscribe" component={Subscribe} />
<Route path="/embed/:customerId" component={EmbedWidget} />

// Protected route for admin
<Route path="/admin">
  {({ params }) => (
    requireActiveSubscription() ? <AdminDashboard /> : <Navigate to="/login" />
  )}
</Route>
```

**10. Create Homepage with SaaS Marketing**

```typescript
// pages/Home.tsx - Transform into SaaS landing page
export default function Home() {
  return (
    <div>
      {/* Hero Section */}
      <section className="bg-gradient-to-br from-blue-600 to-purple-700 text-white py-20">
        <div className="container mx-auto text-center">
          <h1 className="text-5xl font-bold mb-6">
            Turn Your Home Services Into Recurring Revenue
          </h1>
          <p className="text-xl mb-8">
            Professional subscription widgets for pest control, lawn care, HVAC, and more. 
            Get customers to subscribe to your services online in minutes.
          </p>
          <div className="space-x-4">
            <Button size="lg" className="bg-white text-blue-600">
              Start Free Trial
            </Button>
            <Button size="lg" variant="outline" className="border-white text-white">
              View Demo
            </Button>
          </div>
        </div>
      </section>

      {/* Features, testimonials, etc. */}
    </div>
  );
}
```

**EXPECTED RESULT:**
A complete B2B SaaS platform where:
1. **Demo page** shows the widget in action
2. **Registration** creates 14-day free trials
3. **Pricing page** converts trials to paid subscriptions  
4. **Customer dashboard** manages their subscription and shows their revenue
5. **Protected embedding** only works for paying customers
6. **Subscription management** handles upgrades, downgrades, cancellations

This creates a real SaaS business where YOU get $399-999/month per customer, and THEY get a professional subscription system for their services.