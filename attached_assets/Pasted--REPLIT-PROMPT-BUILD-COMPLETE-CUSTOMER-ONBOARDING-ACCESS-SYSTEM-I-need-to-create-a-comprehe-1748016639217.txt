// REPLIT PROMPT - BUILD COMPLETE CUSTOMER ONBOARDING & ACCESS SYSTEM
// I need to create a comprehensive system that takes prospects from free trial signup through 
// full implementation and ongoing management of their ServicePlan Pro widget.

// ============= CUSTOMER ONBOARDING FLOW =============

// 1. FREE TRIAL REGISTRATION
// pages/Register.tsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';

export default function Register() {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    // Company Info
    companyName: '',
    industry: '',
    website: '',
    
    // Contact Info  
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    
    // Business Details
    currentCustomers: '',
    currentRevenue: '',
    hasExistingSubscriptions: false,
    
    // Trial Preferences
    wantsDemo: false,
    implementationHelp: false
  });

  const industries = [
    'Pest Control', 'Lawn Care', 'HVAC Services', 'Pool Service', 
    'Cleaning Services', 'Security Systems', 'Handyman Services', 'Other'
  ];

  const handleNext = () => setStep(step + 1);
  const handlePrev = () => setStep(step - 1);

  const handleSubmit = async () => {
    try {
      const response = await fetch('/api/customers/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (response.ok) {
        // Redirect to welcome flow
        window.location.href = '/welcome';
      }
    } catch (error) {
      console.error('Registration failed:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-2xl mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">Start Your Free Trial</h1>
          <p className="text-gray-600">Get your subscription widget live in under 24 hours</p>
        </div>

        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>Step {step} of 3</CardTitle>
              <Progress value={(step / 3) * 100} className="w-32" />
            </div>
          </CardHeader>
          <CardContent>
            {step === 1 && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">Tell us about your business</h2>
                
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Company Name *</label>
                    <Input
                      value={formData.companyName}
                      onChange={(e) => setFormData({...formData, companyName: e.target.value})}
                      placeholder="ABC Pest Control"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Industry *</label>
                    <select 
                      className="w-full p-2 border rounded-md"
                      value={formData.industry}
                      onChange={(e) => setFormData({...formData, industry: e.target.value})}
                    >
                      <option value="">Select Industry</option>
                      {industries.map(industry => (
                        <option key={industry} value={industry}>{industry}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Website URL</label>
                  <Input
                    value={formData.website}
                    onChange={(e) => setFormData({...formData, website: e.target.value})}
                    placeholder="https://abcpest.com"
                  />
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Approximate Monthly Revenue</label>
                    <select 
                      className="w-full p-2 border rounded-md"
                      value={formData.currentRevenue}
                      onChange={(e) => setFormData({...formData, currentRevenue: e.target.value})}
                    >
                      <option value="">Select Range</option>
                      <option value="0-10k">$0 - $10,000</option>
                      <option value="10k-50k">$10,000 - $50,000</option>
                      <option value="50k-100k">$50,000 - $100,000</option>
                      <option value="100k+">$100,000+</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Current Customers</label>
                    <Input
                      value={formData.currentCustomers}
                      onChange={(e) => setFormData({...formData, currentCustomers: e.target.value})}
                      placeholder="Approximately how many?"
                    />
                  </div>
                </div>

                <Button onClick={handleNext} className="w-full" disabled={!formData.companyName || !formData.industry}>
                  Continue
                </Button>
              </div>
            )}

            {step === 2 && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">Contact Information</h2>
                
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">First Name *</label>
                    <Input
                      value={formData.firstName}
                      onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                      placeholder="John"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Last Name *</label>
                    <Input
                      value={formData.lastName}
                      onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                      placeholder="Smith"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Business Email *</label>
                  <Input
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                    placeholder="john@abcpest.com"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Phone Number *</label>
                  <Input
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    placeholder="(555) 123-4567"
                  />
                </div>

                <div className="bg-blue-50 p-4 rounded-lg">
                  <h3 className="font-semibold mb-2">Do you currently sell subscription services?</h3>
                  <div className="space-y-2">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="hasSubscriptions"
                        checked={formData.hasExistingSubscriptions === false}
                        onChange={() => setFormData({...formData, hasExistingSubscriptions: false})}
                        className="mr-2"
                      />
                      No, this would be new for us
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="hasSubscriptions"
                        checked={formData.hasExistingSubscriptions === true}
                        onChange={() => setFormData({...formData, hasExistingSubscriptions: true})}
                        className="mr-2"
                      />
                      Yes, we have manual subscription processes
                    </label>
                  </div>
                </div>

                <div className="flex space-x-4">
                  <Button onClick={handlePrev} variant="outline" className="flex-1">
                    Back
                  </Button>
                  <Button onClick={handleNext} className="flex-1" disabled={!formData.firstName || !formData.email}>
                    Continue
                  </Button>
                </div>
              </div>
            )}

            {step === 3 && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold">How can we help you succeed?</h2>
                
                <div className="space-y-4">
                  <div className="border rounded-lg p-4">
                    <label className="flex items-start">
                      <input
                        type="checkbox"
                        checked={formData.wantsDemo}
                        onChange={(e) => setFormData({...formData, wantsDemo: e.target.checked})}
                        className="mr-3 mt-1"
                      />
                      <div>
                        <div className="font-semibold">Schedule a personal demo</div>
                        <div className="text-sm text-gray-600">15-minute walkthrough of your customized widget</div>
                      </div>
                    </label>
                  </div>

                  <div className="border rounded-lg p-4">
                    <label className="flex items-start">
                      <input
                        type="checkbox"
                        checked={formData.implementationHelp}
                        onChange={(e) => setFormData({...formData, implementationHelp: e.target.checked})}
                        className="mr-3 mt-1"
                      />
                      <div>
                        <div className="font-semibold">Implementation assistance</div>
                        <div className="text-sm text-gray-600">Help adding the widget to your website</div>
                      </div>
                    </label>
                  </div>
                </div>

                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h3 className="font-semibold text-green-800 mb-2">What happens next?</h3>
                  <ul className="text-sm text-green-700 space-y-1">
                    <li>• Instant access to your customization dashboard</li>
                    <li>• 14-day free trial starts immediately</li>
                    <li>• Setup wizard guides you through configuration</li>
                    <li>• Widget can be live on your site in under 1 hour</li>
                  </ul>
                </div>

                <div className="flex space-x-4">
                  <Button onClick={handlePrev} variant="outline" className="flex-1">
                    Back
                  </Button>
                  <Button onClick={handleSubmit} className="flex-1 bg-green-600 hover:bg-green-700">
                    Start My Free Trial
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        <div className="text-center mt-6 text-sm text-gray-600">
          14-day free trial • No credit card required • Cancel anytime
        </div>
      </div>
    </div>
  );
}

// ============= WELCOME FLOW AFTER REGISTRATION =============
// pages/Welcome.tsx
import { useState, useEffect } from 'react';
import { CheckCircle, ArrowRight, Play } from 'lucide-react';

export default function Welcome() {
  const [customer, setCustomer] = useState(null);
  const [currentStep, setCurrentStep] = useState(1);

  useEffect(() => {
    // Fetch customer data
    fetchCustomerData();
  }, []);

  const steps = [
    {
      title: "Welcome to ServicePlan Pro!",
      description: "Your account is ready. Let's get your widget configured and live.",
      action: "Get Started",
      component: <WelcomeStep />
    },
    {
      title: "Customize Your Widget", 
      description: "Brand it to match your company and set your pricing.",
      action: "Customize Widget",
      component: <CustomizeStep />
    },
    {
      title: "Add to Your Website",
      description: "Copy one line of code to start collecting subscriptions.",
      action: "Get Embed Code", 
      component: <EmbedStep />
    },
    {
      title: "Test Everything",
      description: "Make a test subscription to ensure everything works.",
      action: "Run Test",
      component: <TestStep />
    },
    {
      title: "You're Live!",
      description: "Start promoting your new online subscription capability.",
      action: "View Dashboard",
      component: <CompleteStep />
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
      <div className="max-w-4xl mx-auto px-4">
        {/* Progress Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4">Welcome to ServicePlan Pro!</h1>
          <p className="text-xl text-gray-600">Let's get your subscription widget live in the next 30 minutes</p>
          
          <div className="flex justify-center mt-8">
            <div className="flex items-center space-x-4">
              {steps.map((step, index) => (
                <div key={index} className="flex items-center">
                  <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-semibold ${
                    index + 1 <= currentStep 
                      ? 'bg-green-500 text-white' 
                      : index + 1 === currentStep + 1 
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-300 text-gray-600'
                  }`}>
                    {index + 1 <= currentStep ? <CheckCircle className="h-5 w-5" /> : index + 1}
                  </div>
                  {index < steps.length - 1 && (
                    <div className={`w-12 h-1 ${index + 1 < currentStep ? 'bg-green-500' : 'bg-gray-300'}`} />
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Current Step Content */}
        <Card className="p-8">
          <CardContent>
            {steps[currentStep - 1]?.component}
          </CardContent>
        </Card>

        {/* Navigation */}
        <div className="flex justify-between mt-8">
          <Button 
            variant="outline" 
            onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
            disabled={currentStep === 1}
          >
            Previous
          </Button>
          
          <div className="text-sm text-gray-600">
            Step {currentStep} of {steps.length}
          </div>
          
          <Button 
            onClick={() => setCurrentStep(Math.min(steps.length, currentStep + 1))}
            disabled={currentStep === steps.length}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {steps[currentStep - 1]?.action}
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}

// Welcome Step Components
function WelcomeStep() {
  return (
    <div className="text-center space-y-6">
      <div className="text-6xl">🎉</div>
      <h2 className="text-2xl font-bold">Your account is ready!</h2>
      <p className="text-lg text-gray-600 max-w-2xl mx-auto">
        Welcome to ServicePlan Pro! We're excited to help you turn your website visitors into recurring subscribers.
        This quick setup will have you collecting subscriptions within the hour.
      </p>
      
      <div className="grid md:grid-cols-3 gap-6 mt-8">
        <div className="bg-blue-50 p-6 rounded-lg">
          <div className="text-3xl mb-3">⚡</div>
          <h3 className="font-semibold mb-2">5-Minute Setup</h3>
          <p className="text-sm text-gray-600">Configure your widget faster than making coffee</p>
        </div>
        <div className="bg-green-50 p-6 rounded-lg">
          <div className="text-3xl mb-3">🎨</div>
          <h3 className="font-semibold mb-2">Your Brand</h3>
          <p className="text-sm text-gray-600">Customize colors, logo, and messaging</p>
        </div>
        <div className="bg-purple-50 p-6 rounded-lg">
          <div className="text-3xl mb-3">💰</div>
          <h3 className="font-semibold mb-2">Start Earning</h3>
          <p className="text-sm text-gray-600">Begin collecting subscriptions immediately</p>
        </div>
      </div>

      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-8">
        <div className="flex items-center justify-center">
          <div className="text-yellow-600 mr-2">⏰</div>
          <span className="font-semibold">Your 14-day free trial has started</span>
        </div>
        <p className="text-sm text-gray-600 mt-1">No credit card required • Cancel anytime</p>
      </div>
    </div>
  );
}

// ============= CUSTOMER DASHBOARD =============
// pages/CustomerDashboard.tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function CustomerDashboard() {
  const [customer, setCustomer] = useState(null);
  const [stats, setStats] = useState({
    totalSubscriptions: 0,
    monthlyRevenue: 0,
    conversionRate: 0,
    trialDaysLeft: 14
  });

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold">Dashboard</h1>
              <p className="text-gray-600">Welcome back, {customer?.companyName}</p>
            </div>
            
            {/* Trial Status */}
            {stats.trialDaysLeft > 0 && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="text-blue-800 font-semibold">
                  {stats.trialDaysLeft} days left in trial
                </div>
                <Link href="/billing">
                  <Button size="sm" className="mt-2">Upgrade Now</Button>
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        <Tabs defaultValue="overview">
          <TabsList className="mb-8">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="customize">Customize Widget</TabsTrigger>
            <TabsTrigger value="embed">Embed Code</TabsTrigger>
            <TabsTrigger value="customers">Customers</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="billing">Billing</TabsTrigger>
            <TabsTrigger value="support">Support</TabsTrigger>
          </TabsList>

          {/* OVERVIEW TAB */}
          <TabsContent value="overview">
            <div className="space-y-6">
              {/* Quick Stats */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-blue-600">{stats.totalSubscriptions}</div>
                    <div className="text-sm text-gray-600">Total Subscriptions</div>
                    <div className="text-xs text-green-600 mt-1">+12% this month</div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-green-600">${stats.monthlyRevenue}</div>
                    <div className="text-sm text-gray-600">Monthly Revenue</div>
                    <div className="text-xs text-green-600 mt-1">+25% this month</div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-purple-600">{stats.conversionRate}%</div>
                    <div className="text-sm text-gray-600">Conversion Rate</div>
                    <div className="text-xs text-green-600 mt-1">+3% this month</div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-6">
                    <div className="text-2xl font-bold text-orange-600">24/7</div>
                    <div className="text-sm text-gray-600">Widget Uptime</div>
                    <div className="text-xs text-green-600 mt-1">99.9% uptime</div>
                  </CardContent>
                </Card>
              </div>

              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle>Quick Actions</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-3 gap-4">
                    <Button className="h-20 flex flex-col space-y-2">
                      <div className="text-2xl">🎨</div>
                      <div>Customize Widget</div>
                    </Button>
                    <Button className="h-20 flex flex-col space-y-2" variant="outline">
                      <div className="text-2xl">👥</div>
                      <div>View Customers</div>
                    </Button>
                    <Button className="h-20 flex flex-col space-y-2" variant="outline">
                      <div className="text-2xl">📊</div>
                      <div>Analytics</div>
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Recent Activity */}
              <Card>
                <CardHeader>
                  <CardTitle>Recent Subscriptions</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      { name: 'John Smith', plan: 'Monthly Treatment', amount: '$49', time: '2 hours ago' },
                      { name: 'Sarah Johnson', plan: 'Quarterly Plan', amount: '$129', time: '5 hours ago' },
                      { name: 'Mike Davis', plan: 'Annual Protection', amount: '$399', time: '1 day ago' }
                    ].map((sub, index) => (
                      <div key={index} className="flex justify-between items-center py-3 border-b last:border-b-0">
                        <div>
                          <div className="font-semibold">{sub.name}</div>
                          <div className="text-sm text-gray-600">{sub.plan}</div>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold text-green-600">{sub.amount}</div>
                          <div className="text-sm text-gray-600">{sub.time}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* CUSTOMIZE TAB */}
          <TabsContent value="customize">
            {/* Include the full customization dashboard from previous artifact */}
            <CustomizationDashboard />
          </TabsContent>

          {/* EMBED TAB */}
          <TabsContent value="embed">
            <EmbedCodeGenerator />
          </TabsContent>

          {/* CUSTOMERS TAB */}
          <TabsContent value="customers">
            <CustomerManagement />
          </TabsContent>

          {/* ANALYTICS TAB */}
          <TabsContent value="analytics">
            <AnalyticsDashboard />
          </TabsContent>

          {/* BILLING TAB */}
          <TabsContent value="billing">
            <BillingManagement />
          </TabsContent>

          {/* SUPPORT TAB */}
          <TabsContent value="support">
            <SupportCenter />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

// ============= IMPLEMENTATION SUPPORT SYSTEM =============
// components/ImplementationSupport.tsx
export default function ImplementationSupport() {
  const [needsHelp, setNeedsHelp] = useState(false);
  const [implementationMethod, setImplementationMethod] = useState('');

  return (
    <Card>
      <CardHeader>
        <CardTitle>Implementation Support</CardTitle>
        <p className="text-gray-600">We'll help you get your widget live on your website</p>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          <div>
            <h3 className="font-semibold mb-4">How would you like to implement?</h3>
            <div className="space-y-3">
              <label className="flex items-start p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                <input
                  type="radio"
                  name="implementation"
                  value="self"
                  onChange={(e) => setImplementationMethod(e.target.value)}
                  className="mr-3 mt-1"
                />
                <div>
                  <div className="font-medium">I'll do it myself</div>
                  <div className="text-sm text-gray-600">Copy/paste embed code (5 minutes)</div>
                </div>
              </label>
              
              <label className="flex items-start p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                <input
                  type="radio"
                  name="implementation"
                  value="guided"
                  onChange={(e) => setImplementationMethod(e.target.value)}
                  className="mr-3 mt-1"
                />
                <div>
                  <div className="font-medium">Guided setup call</div>
                  <div className="text-sm text-gray-600">15-minute screen share with our team</div>
                </div>
              </label>
              
              <label className="flex items-start p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                <input
                  type="radio"
                  name="implementation"
                  value="done-for-you"
                  onChange={(e) => setImplementationMethod(e.target.value)}
                  className="mr-3 mt-1"
                />
                <div>
                  <div className="font-medium">We'll do it for you</div>
                  <div className="text-sm text-gray-600">Send us your website login, we handle everything</div>
                </div>
              </label>
            </div>
          </div>

          {implementationMethod === 'guided' && (
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-semibold mb-2">Schedule Your Setup Call</h4>
              <p className="text-sm text-gray-600 mb-3">
                Our implementation specialist will screen share and help you add the widget to your site.
              </p>
              <Button>Book 15-Minute Setup Call</Button>
            </div>
          )}

          {implementationMethod === 'done-for-you' && (
            <div className="bg-green-50 p-4 rounded-lg">
              <h4 className="font-semibold mb-2">Done-For-You Setup</h4>
              <p className="text-sm text-gray-600 mb-3">
                We'll add the widget to your website and test everything for you.
              </p>
              <div className="space-y-3">
                <Input placeholder="Website admin login URL" />
                <Input placeholder="Username" />
                <Input type="password" placeholder="Password" />
                <p className="text-xs text-gray-500">
                  🔒 Secure: We'll remove our access immediately after setup
                </p>
                <Button>Submit for Setup</Button>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}