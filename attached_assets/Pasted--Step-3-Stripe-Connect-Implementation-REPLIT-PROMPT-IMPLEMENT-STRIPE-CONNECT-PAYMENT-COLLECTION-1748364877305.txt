## Step 3: Stripe Connect Implementation
REPLIT PROMPT - IMPLEMENT STRIPE CONNECT PAYMENT COLLECTION
I need to add Stripe Connect so HVAC companies can collect payments directly from their customers through my widget platform.
STEPS TO IMPLEMENT:

CREATE api/stripe/connect/create-account.ts:

typescriptimport express from 'express';
import Stripe from 'stripe';
import { requireAuth } from '../../../middleware/auth';
import { db } from '../../../lib/db';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2022-11-15',
});

router.post('/create-account', requireAuth, async (req, res) => {
  try {
    const customerId = req.session.userId;
    
    // Get customer from database
    const customer = await db.customers.findUnique({
      where: { id: customerId }
    });
    
    if (!customer) {
      return res.status(404).json({ error: 'Customer not found' });
    }
    
    // Check if already has Connect account
    if (customer.stripeConnectAccountId) {
      // Return existing account link
      const accountLink = await stripe.accountLinks.create({
        account: customer.stripeConnectAccountId,
        refresh_url: `${process.env.DOMAIN}/dashboard/payments?refresh=true`,
        return_url: `${process.env.DOMAIN}/dashboard/payments?success=true`,
        type: 'account_onboarding',
      });
      
      return res.json({ url: accountLink.url });
    }
    
    // Create new Connect account
    const account = await stripe.accounts.create({
      type: 'express',
      country: 'US',
      email: customer.email,
      business_type: 'company',
      company: {
        name: customer.companyName
      },
      capabilities: {
        card_payments: { requested: true },
        transfers: { requested: true },
      },
    });
    
    // Update customer record
    await db.customers.update({
      where: { id: customerId },
      data: { stripeConnectAccountId: account.id }
    });
    
    // Create account link
    const accountLink = await stripe.accountLinks.create({
      account: account.id,
      refresh_url: `${process.env.DOMAIN}/dashboard/payments?refresh=true`,
      return_url: `${process.env.DOMAIN}/dashboard/payments?success=true`,
      type: 'account_onboarding',
    });
    
    res.json({ url: accountLink.url });
  } catch (error) {
    console.error('Stripe Connect error:', error);
    res.status(500).json({ error: error.message });
  }
});

export default router;

CREATE api/stripe/connect/status.ts:

typescriptimport express from 'express';
import Stripe from 'stripe';
import { requireAuth } from '../../../middleware/auth';
import { db } from '../../../lib/db';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2022-11-15',
});

router.get('/status', requireAuth, async (req, res) => {
  try {
    const customerId = req.session.userId;
    
    // Get customer from database
    const customer = await db.customers.findUnique({
      where: { id: customerId }
    });
    
    if (!customer || !customer.stripeConnectAccountId) {
      return res.json({
        accountId: null,
        chargesEnabled: false,
        transfersEnabled: false,
        payoutsEnabled: false,
        detailsSubmitted: false
      });
    }
    
    // Get account from Stripe
    const account = await stripe.accounts.retrieve(customer.stripeConnectAccountId);
    
    res.json({
      accountId: account.id,
      chargesEnabled: account.charges_enabled,
      transfersEnabled: account.transfers_enabled,
      payoutsEnabled: account.payouts_enabled,
      detailsSubmitted: account.details_submitted,
      requirements: account.requirements
    });
  } catch (error) {
    console.error('Stripe Connect status error:', error);
    res.status(500).json({ error: error.message });
  }
});

export default router;

CREATE api/stripe/connect/webhook.ts for processing Connect events:

typescriptimport express from 'express';
import Stripe from 'stripe';
import { db } from '../../../lib/db';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2022-11-15',
});

// This endpoint needs raw body for Stripe signature verification
router.post('/webhook', express.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  
  if (!sig) {
    return res.status(400).json({ error: 'Missing Stripe signature' });
  }
  
  try {
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_CONNECT_WEBHOOK_SECRET!
    );
    
    // Handle different event types
    switch (event.RetryCLContinueEditLet's continue with the implementation for Stripe Connect:
typescript    // Handle different event types
    switch (event.type) {
      case 'account.updated':
        await handleAccountUpdate(event.data.object);
        break;
        
      case 'account.application.authorized':
        await handleAccountAuthorized(event.data.object);
        break;
        
      case 'account.application.deauthorized':
        await handleAccountDeauthorized(event.data.object);
        break;
        
      // Add other Connect event types as needed
    }
    
    res.json({ received: true });
  } catch (error) {
    console.error('Stripe webhook error:', error);
    return res.status(400).json({ error: error.message });
  }
});

// Handle account updates
async function handleAccountUpdate(account) {
  try {
    // Find customer with this Connect account
    const customer = await db.customers.findFirst({
      where: { stripeConnectAccountId: account.id }
    });
    
    if (!customer) {
      console.error(`No customer found for Connect account ${account.id}`);
      return;
    }
    
    // Update account status
    await db.customers.update({
      where: { id: customer.id },
      data: {
        connectChargesEnabled: account.charges_enabled,
        connectPayoutsEnabled: account.payouts_enabled,
        connectDetailsSubmitted: account.details_submitted
      }
    });
    
    console.log(`Updated Connect account status for customer ${customer.id}`);
  } catch (error) {
    console.error('Error handling account update:', error);
  }
}

// Handle account authorization
async function handleAccountAuthorized(account) {
  try {
    // Find customer with this Connect account
    const customer = await db.customers.findFirst({
      where: { stripeConnectAccountId: account.id }
    });
    
    if (!customer) {
      console.error(`No customer found for Connect account ${account.id}`);
      return;
    }
    
    // Update account status
    await db.customers.update({
      where: { id: customer.id },
      data: {
        connectStatus: 'authorized'
      }
    });
    
    console.log(`Account authorized for customer ${customer.id}`);
  } catch (error) {
    console.error('Error handling account authorization:', error);
  }
}

// Handle account deauthorization
async function handleAccountDeauthorized(account) {
  try {
    // Find customer with this Connect account
    const customer = await db.customers.findFirst({
      where: { stripeConnectAccountId: account.id }
    });
    
    if (!customer) {
      console.error(`No customer found for Connect account ${account.id}`);
      return;
    }
    
    // Update account status
    await db.customers.update({
      where: { id: customer.id },
      data: {
        connectStatus: 'deauthorized',
        connectChargesEnabled: false,
        connectPayoutsEnabled: false
      }
    });
    
    console.log(`Account deauthorized for customer ${customer.id}`);
  } catch (error) {
    console.error('Error handling account deauthorization:', error);
  }
}

export default router;

UPDATE the checkout API to use the connected account:

typescript// api/create-checkout-session.ts
import express from 'express';
import Stripe from 'stripe';
import { db } from '../lib/db';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2022-11-15',
});

router.post('/create-checkout-session', async (req, res) => {
  try {
    const { planId, customerEmail, customerName, phone, tenantId } = req.body;
    
    if (!planId || !customerEmail || !customerName || !tenantId) {
      return res.status(400).json({ 
        error: 'Missing required fields: planId, customerEmail, customerName, and tenantId are required' 
      });
    }
    
    // Get tenant (HVAC company) information
    const tenant = await db.customers.findUnique({
      where: { id: tenantId }
    });
    
    if (!tenant) {
      return res.status(404).json({ error: 'Tenant not found' });
    }
    
    // Check if tenant has Stripe Connect set up
    if (!tenant.stripeConnectAccountId) {
      return res.status(400).json({ 
        error: 'Tenant does not have payment processing set up'
      });
    }
    
    // Create a checkout session on the connected account
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      customer_email: customerEmail,
      line_items: [
        {
          price: planId, // Tenant's Stripe Price ID
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${process.env.DOMAIN}/success?session_id={CHECKOUT_SESSION_ID}&tenant_id=${tenantId}`,
      cancel_url: `${process.env.DOMAIN}/cancel?tenant_id=${tenantId}`,
      metadata: {
        customer_name: customerName,
        phone: phone || '',
        tenant_id: tenantId
      },
      // This is the key part - using the connected account
      stripe_account: tenant.stripeConnectAccountId,
      // Optional platform fee (if you want to take a percentage)
      /*
      application_fee_percent: 2.5, // 2.5% platform fee
      */
    });
    
    // Return the session URL
    res.json({ url: session.url });
  } catch (error) {
    console.error('Stripe session creation error:', error);
    res.status(500).json({ error: error.message });
  }
});

export default router;

CREATE a PaymentSetup component for the customer dashboard:

typescript// components/dashboard/PaymentSetup.tsx
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertTriangle, ExternalLink } from 'lucide-react';

export default function PaymentSetup() {
  const [connectStatus, setConnectStatus] = useState({
    connected: false,
    chargesEnabled: false,
    transfersEnabled: false,
    payoutsEnabled: false,
    detailsSubmitted: false,
    loading: true,
    error: null
  });
  
  useEffect(() => {
    fetchConnectStatus();
  }, []);
  
  const fetchConnectStatus = async () => {
    try {
      setConnectStatus(prev => ({ ...prev, loading: true, error: null }));
      
      const response = await fetch('/api/stripe/connect/status');
      
      if (!response.ok) {
        throw new Error('Failed to fetch Connect status');
      }
      
      const data = await response.json();
      
      setConnectStatus({
        connected: !!data.accountId,
        chargesEnabled: data.chargesEnabled,
        transfersEnabled: data.transfersEnabled,
        payoutsEnabled: data.payoutsEnabled,
        detailsSubmitted: data.detailsSubmitted,
        loading: false,
        error: null
      });
    } catch (error) {
      console.error('Error fetching Connect status:', error);
      setConnectStatus(prev => ({ 
        ...prev, 
        loading: false, 
        error: error.message 
      }));
    }
  };
  
  const handleConnectStripe = async () => {
    try {
      setConnectStatus(prev => ({ ...prev, loading: true, error: null }));
      
      const response = await fetch('/api/stripe/connect/create-account', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create Connect account');
      }
      
      const data = await response.json();
      
      if (data.url) {
        // Redirect to Stripe Connect onboarding
        window.location.href = data.url;
      } else {
        throw new Error('No redirect URL returned');
      }
    } catch (error) {
      console.error('Error creating Connect account:', error);
      setConnectStatus(prev => ({ 
        ...prev, 
        loading: false, 
        error: error.message 
      }));
    }
  };
  
  // Check for return from Stripe Connect onboarding
  useEffect(() => {
    const queryParams = new URLSearchParams(window.location.search);
    const refresh = queryParams.get('refresh');
    const success = queryParams.get('success');
    
    if (refresh === 'true' || success === 'true') {
      // Clean up URL
      window.history.replaceState({}, document.title, window.location.pathname);
      // Refresh status
      fetchConnectStatus();
    }
  }, []);
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Payment Collection Setup
          {connectStatus.connected && connectStatus.chargesEnabled ? (
            <Badge variant="success" className="ml-2">Active</Badge>
          ) : connectStatus.connected && connectStatus.detailsSubmitted ? (
            <Badge variant="warning" className="ml-2">Pending</Badge>
          ) : (
            <Badge variant="destructive" className="ml-2">Not Set Up</Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent>
        {connectStatus.loading ? (
          <div className="flex justify-center py-4">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : connectStatus.error ? (
          <Alert variant="destructive" className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Error: {connectStatus.error}. Please try again.
            </AlertDescription>
          </Alert>
        ) : connectStatus.connected && connectStatus.chargesEnabled ? (
          <div className="space-y-4">
            <div className="flex items-center text-green-600">
              <CheckCircle className="mr-2 h-5 w-5" />
              <span className="font-medium">Your bank account is connected</span>
            </div>
            <p className="text-gray-600">
              All customer payments through your subscription widget will be deposited directly 
              to your connected bank account.
            </p>
            
            <div className="mt-6 pt-4 border-t border-gray-200">
              <h3 className="font-medium mb-2">Payment Details</h3>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-600">Payment Processing</span>
                  <span className="font-medium text-green-600">Active</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Payouts</span>
                  <span className="font-medium">
                    {connectStatus.payoutsEnabled ? (
                      <span className="text-green-600">Enabled</span>
                    ) : (
                      <span className="text-amber-600">Pending</span>
                    )}
                  </span>
                </div>
              </div>
            </div>
            
            <div className="mt-4">
              <Button 
                variant="outline"
                onClick={handleConnectStripe}
              >
                Update Payment Details
                <ExternalLink className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        ) : connectStatus.connected && connectStatus.detailsSubmitted ? (
          <div className="space-y-4">
            <Alert variant="warning" className="mb-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                Your account is pending activation. This usually takes 24-48 hours.
              </AlertDescription>
            </Alert>
            
            <p className="text-gray-600">
              Your bank account is connected, but Stripe is still reviewing your information.
              You'll receive an email when your account is ready to accept payments.
            </p>
            
            <div className="mt-4">
              <Button 
                variant="outline"
                onClick={handleConnectStripe}
              >
                Check Status
                <ExternalLink className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <Alert variant="warning">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                You need to connect your bank account to receive payments from customers.
              </AlertDescription>
            </Alert>
            
            <p>
              Customer payments through your subscription widget will be sent directly to your bank 
              account. This requires a one-time setup with our payment processor, Stripe.
            </p>
            
            <div className="bg-gray-50 p-4 rounded-lg space-y-3 mt-4">
              <div className="flex items-start">
                <div className="bg-blue-100 text-blue-800 rounded-full w-6 h-6 flex items-center justify-center mr-3 mt-0.5 flex-shrink-0">1</div>
                <div>
                  <h4 className="font-medium">Connect your bank account</h4>
                  <p className="text-sm text-gray-600">
                    Securely connect your business bank account to receive customer payments.
                  </p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="bg-blue-100 text-blue-800 rounded-full w-6 h-6 flex items-center justify-center mr-3 mt-0.5 flex-shrink-0">2</div>
                <div>
                  <h4 className="font-medium">Verify your business</h4>
                  <p className="text-sm text-gray-600">
                    Provide basic business information to comply with financial regulations.
                  </p>
                </div>
              </div>
              
              <div className="flex items-start">
                <div className="bg-blue-100 text-blue-800 rounded-full w-6 h-6 flex items-center justify-center mr-3 mt-0.5 flex-shrink-0">3</div>
                <div>
                  <h4 className="font-medium">Start accepting payments</h4>
                  <p className="text-sm text-gray-600">
                    Once approved, customer payments will be automatically deposited.
                  </p>
                </div>
              </div>
            </div>
            
            <Button 
              onClick={handleConnectStripe}
              className="mt-6 w-full sm:w-auto"
            >
              Connect Bank Account
              <ExternalLink className="ml-2 h-4 w-4" />
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

ADD database schema updates for Stripe Connect:

typescript// Add these fields to your customers table schema
/*
stripeConnectAccountId: string (nullable)
connectChargesEnabled: boolean (default: false)
connectPayoutsEnabled: boolean (default: false)
connectDetailsSubmitted: boolean (default: false)
connectStatus: string (default: 'pending')
*/

UPDATE the routes/index.ts file to include the Stripe Connect routes:

typescriptimport express from 'express';
import createCheckoutSession from './create-checkout-session';
import stripeWebhook from './stripe-webhook';
import stripeConnectCreate from './stripe/connect/create-account';
import stripeConnectStatus from './stripe/connect/status';
import stripeConnectWebhook from './stripe/connect/webhook';

const router = express.Router();

// Stripe routes
router.use('/api', createCheckoutSession);
router.use('/api/webhook', stripeWebhook);
router.use('/api/stripe/connect', stripeConnectCreate);
router.use('/api/stripe/connect', stripeConnectStatus);
router.use('/api/stripe/connect', stripeConnectWebhook);

export default router;
EXPECTED RESULT:

HVAC companies can connect their bank accounts
Customer payments flow directly to HVAC companies
Professional payment setup dashboard
Complete Stripe Connect integration
Optional platform fee capability

This implementation creates a complete Stripe Connect system allowing HVAC companies to collect customer payments directly through your widget platform while you maintain control of the platform itself.
