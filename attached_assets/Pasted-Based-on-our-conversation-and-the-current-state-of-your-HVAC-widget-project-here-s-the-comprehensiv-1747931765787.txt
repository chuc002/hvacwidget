Based on our conversation and the current state of your HVAC widget project, here's the comprehensive Replit prompt to continue building:

---

## REPLIT BUILD PROMPT - HVAC WIDGET PHASE 2: STRIPE INTEGRATION

You are continuing development of an existing HVAC subscription widget SaaS. The frontend React components are built and working. Now implement the complete Stripe payment flow with backend API routes, webhook handling, and database integration.

**PROJECT STATUS:**
- âœ… Frontend widget UI completed (React + Tailwind)
- âœ… Embeddable iframe system working  
- âœ… Live Stripe account configured with API keys
- âœ… Webhook endpoint created in Stripe
- ðŸš§ NEED: Backend payment processing routes
- ðŸš§ NEED: Webhook handler for payment completion
- ðŸš§ NEED: Supabase database integration

**ENVIRONMENT VARIABLES (already set):**
```
STRIPE_SECRET_KEY = sk_live_...
VITE_STRIPE_PUBLIC_KEY = pk_live_...
STRIPE_WEBHOOK_SECRET = whsec_...
DOMAIN = https://b427efec-f4e9-41e0-b61e-92fcc872ce99-00-2kpr9t7clp5c7.spock.replit.dev
```

**BUILD REQUIREMENTS:**

### 1. Create `/api/create-checkout-session.ts`
```typescript
import Stripe from 'stripe';
import express from 'express';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-11-20.acacia',
});

router.post('/create-checkout-session', async (req, res) => {
  const { planId, customerEmail, customerName, phone } = req.body;

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      customer_email: customerEmail,
      line_items: [
        {
          price: planId, // Stripe Price ID from frontend
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${process.env.DOMAIN}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.DOMAIN}/cancel`,
      metadata: {
        customer_name: customerName,
        phone: phone,
        business_id: 'demo-hvac-company', // Will be dynamic later
      },
    });

    res.json({ url: session.url });
  } catch (err) {
    console.error('Stripe session error:', err);
    res.status(500).json({ error: err.message });
  }
});

export default router;
```

### 2. Create `/api/webhook.ts`
```typescript
import Stripe from 'stripe';
import express from 'express';
import { supabase } from '../lib/supabase';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-11-20.acacia',
});

router.post('/webhook', express.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig!, process.env.STRIPE_WEBHOOK_SECRET!);
  } catch (err) {
    console.error('Webhook signature verification failed:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object as Stripe.Checkout.Session;
    
    // Extract customer data
    const customerEmail = session.customer_email;
    const customerName = session.metadata?.customer_name;
    const phone = session.metadata?.phone;
    const businessId = session.metadata?.business_id;

    // Get price details
    const lineItems = await stripe.checkout.sessions.listLineItems(session.id);
    const priceId = lineItems.data[0]?.price?.id;

    try {
      // Store in Supabase
      const { error } = await supabase
        .from('subscriptions')
        .insert([
          {
            email: customerEmail,
            name: customerName,
            phone: phone,
            plan_id: priceId,
            stripe_session_id: session.id,
            stripe_customer_id: session.customer,
            business_id: businessId,
            status: 'active',
          },
        ]);

      if (error) {
        console.error('Supabase error:', error);
      } else {
        console.log('Subscription saved successfully');
      }

      // TODO: Send to CRM via Zapier webhook
      
    } catch (dbError) {
      console.error('Database error:', dbError);
    }
  }

  res.status(200).json({ received: true });
});

export default router;
```

### 3. Create `/lib/supabase.ts`
```typescript
import { createClient } from '@supabase/supabase-js';

export const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);
```

### 4. Update Main Server File
Ensure your main server file (likely `index.ts` or `server.ts`) includes:
```typescript
import express from 'express';
import cors from 'cors';
import checkoutRoutes from './api/create-checkout-session';
import webhookRoutes from './api/webhook';

const app = express();

app.use(cors());
app.use('/api/webhook', webhookRoutes); // Raw body for webhooks
app.use(express.json()); // JSON parsing for other routes
app.use('/api', checkoutRoutes);

// Your existing routes...
```

### 5. Frontend Integration
Update your Widget component to call the checkout API:
```typescript
const handleSubscribe = async (planId: string) => {
  const response = await fetch('/api/create-checkout-session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      planId: planId, // Use actual Stripe Price IDs
      customerEmail: formData.email,
      customerName: formData.name,
      phone: formData.phone,
    }),
  });

  const { url } = await response.json();
  window.location.href = url;
};
```

### 6. Add Success/Cancel Pages
Create `/client/src/pages/Success.tsx` and `/client/src/pages/Cancel.tsx`

**IMMEDIATE GOALS:**
1. Wire up checkout session creation
2. Handle webhook events properly
3. Set up Supabase database
4. Test end-to-end payment flow

**NEXT PHASE:**
- Business dashboard for HVAC companies
- Dynamic plan configuration
- CRM integrations (Zapier, Jobber, Housecall Pro)

Execute this implementation step by step, ensuring all API routes are properly connected and tested.